name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: press
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync

    - name: Install Just
      uses: extractions/setup-just@v1

    - name: Install Playwright browsers
      run: uv run playwright install chromium

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
      run: uv run alembic upgrade head

    - name: Seed database with test data
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
        PYTHONPATH: .
      run: |
        echo "Starting database seeding..."
        uv run python app/seed.py
        echo "Seeding completed. Checking subjects..."
        uv run python -c "
        import asyncio
        from app.database import AsyncSessionLocal
        from sqlalchemy import text
        
        async def check_subjects():
            async with AsyncSessionLocal() as session:
                result = await session.execute(text('SELECT COUNT(*) FROM subjects'))
                count = result.scalar()
                print(f'Total subjects in database: {count}')
                
                if count > 0:
                    subjects = await session.execute(text('SELECT name FROM subjects LIMIT 5'))
                    names = [row[0] for row in subjects]
                    print(f'First 5 subjects: {names}')
                else:
                    print('No subjects found in database!')
        
        asyncio.run(check_subjects())
        "

    - name: Run linting
      run: just lint

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
      run: uv run pytest -m "not e2e"

    - name: Start development server for e2e tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
        PYTHONPATH: .
        PORT: 8000
      run: |
        echo "Starting development server with DATABASE_URL: $DATABASE_URL"
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        echo "Checking if server is responding..."
        curl -f http://localhost:8000 || exit 1
        echo "Checking subjects available via API..."
        curl -s http://localhost:8000/upload | grep -o 'option.*value="[^"]*"' | head -10 || echo "No option elements found"

    - name: Verify server database connection
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
        PYTHONPATH: .
      run: |
        echo "Verifying server can connect to database and see subjects..."
        uv run python -c "
        import asyncio
        import httpx
        
        async def check_server_subjects():
            async with httpx.AsyncClient() as client:
                try:
                    response = await client.get('http://localhost:8000/upload')
                    if response.status_code == 200:
                        content = response.text
                        if 'Computer Science' in content:
                            print('✓ Server can see subjects in database')
                        else:
                            print('✗ Server cannot see subjects in database')
                            print('Upload page content preview:')
                            lines = content.split('\n')
                            for i, line in enumerate(lines):
                                if 'select' in line.lower() and 'subject' in line.lower():
                                    start = max(0, i-2)
                                    end = min(len(lines), i+8)
                                    for j in range(start, end):
                                        print(f'{j:3}: {lines[j]}')
                                    break
                    else:
                        print(f'Server returned status {response.status_code}')
                except Exception as e:
                    print(f'Error checking server: {e}')
        
        asyncio.run(check_server_subjects())
        "

    - name: Run critical e2e tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/press
        TESTING: 1
      run: uv run pytest tests/e2e/test_live_server.py tests/e2e/test_complete_flows.py::test_registration_upload_public_access -v
